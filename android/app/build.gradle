apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"

android {
    compileSdk 34
    namespace "com.example.myapplication"
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.example.myapplication"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.ext.kotlinVersion"
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Retrofit for API calls
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'

    // Coroutines for asynchronous programming
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.2'
    
    // Encrypted Shared Preferences
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'

    // Offline speech recognition with Vosk (needs JNA)
    implementation 'net.java.dev.jna:jna:5.13.0@aar'
    implementation 'com.alphacephei:vosk-android:0.3.47@aar'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// -----------------------------------------------------------------------------
// Offline Vosk model download & extraction (runs before the first build)
// -----------------------------------------------------------------------------

import java.net.URL
import java.util.UUID

def voskModelUrl = "https://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip"
def assetsDir = "$projectDir/src/main/assets"
def modelDir = "$assetsDir/model-en-us"

tasks.register("prepareVoskModel") {
    doLast {
        def modelFolder = file(modelDir)
        if (modelFolder.exists()) {
            def uuidFile = new File(modelFolder, "uuid")
            if (!uuidFile.exists()) {
                uuidFile.text = UUID.randomUUID().toString()
                println "Generated missing uuid file: ${uuidFile.absolutePath}"
            }
            println "âœ“ Vosk offline model already present -> $modelDir"
            return
        }

        println "Downloading Vosk offline model (~50 MB)â€¦"
        file(assetsDir).mkdirs()
        def zipFile = file("$buildDir/vosk-model.zip")
        if (!zipFile.exists()) {
            new URL(voskModelUrl).withInputStream { ins ->
                zipFile.withOutputStream { out -> out << ins }
            }
        }

        println "Extracting modelâ€¦"
        copy {
            from zipTree(zipFile)
            into assetsDir
        }

        // The archive extracts into a folder like 'vosk-model-small-en-us-0.15'. Rename to 'model-en-us'.
        file("$assetsDir/vosk-model-small-en-us-0.15").renameTo(modelFolder)
        // Add uuid file required by StorageService sync logic
        def uuidFile = new File(modelFolder, "uuid")
        if (!uuidFile.exists()) {
            uuidFile.text = UUID.randomUUID().toString()
            println "Generated uuid file for model: ${uuidFile.absolutePath}"
        }
        println "âœ“ Model ready at $modelDir"
    }
}

// Ensure model is present before compiling
preBuild.dependsOn tasks.named("prepareVoskModel")
